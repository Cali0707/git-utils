#!/usr/bin/env bash

# Copyright 2023 Calum Murray
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

if [[ -z $1 ]]; then
    echo "Please provide a fork url"
    echo "usage: git clonefork <fork_url>"
    exit 2
fi

GIT_ORIGIN=$1
# get the name of the directory that will be created when we clone
REPO_DIRECTORY=$(basename $GIT_ORIGIN .git)
# reformat the repo url into a github api request
GITHUB_API_URL=$(echo $GIT_ORIGIN | sed -r 's/.*(\@|\/\/)(.*)(\:|\/)([^:\/]*)\/([^\/\.]*)\.git/https:\/\/api.github.com\/repos\/\4\/\5/')

# make the api request and validate we get a good response
# -f makes curl fail silently, so REPO_DATA will be null on failure
REPO_DATA=$(curl -fs $GITHUB_API_URL)
if [[ -z $REPO_DATA ]]; then
    echo "Please provide a valid fork url"
    echo "usage: git clonefork <fork_url>"
    exit 2
fi

if grep -Eiq "^https?://" <<<$GIT_ORIGIN; then
    # we aren't cloning with ssh, use the default parent clone_url
	UPSTREAM_ORIGIN=$(echo $REPO_DATA | jq -r .parent.clone_url)
else
    # we want to clone with ssh
	UPSTREAM_ORIGIN=$(echo $REPO_DATA | jq -r .parent.ssh_url)
fi

git clone $GIT_ORIGIN
cd $REPO_DIRECTORY
git remote add upstream $UPSTREAM_ORIGIN
git remote set-url --push upstream no_push
